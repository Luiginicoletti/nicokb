/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <10 9>;
        };

        deck {
            bindings = <&lt 0 C_AC_DESKTOP_SHOW_ALL_APPLICATIONS>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q             &kp W           &kp E         &kp R             &kp T        &kp Y        &kp U              &kp I            &kp O            &kp P                  &trans
&trans  &mt LEFT_GUI A    &mt LEFT_ALT S  &mt LCTRL D   &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RCTRL K      &mt RIGHT_ALT L  &mt RIGHT_GUI SEMI     &trans
&trans  &mt LEFT_SHIFT Z  &kp X           &kp C         &kp V             &kp B        &kp N        &kp M              &kp COMMA        &kp DOT          &mt RIGHT_SHIFT SLASH  &trans
                                          &lt 1 ESCAPE  &lt 2 SPACE       &lt 3 TAB    &lt 6 ENTER  &lt 5 SPACE        &lt 4 BACKSPACE
            >;
        };

        symb {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &trans      &trans         &trans     &trans         &kp SQT       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
&trans  &kp LEFT_SHIFT   &trans       &trans    &trans      &trans         &trans     &trans         &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans
                                      &trans    &trans      &trans         &trans     &trans         &trans
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3    &kp N4  &kp N5       &kp N6     &kp N7  &kp N8    &kp N9  &kp N0     &trans
&trans  &trans  &trans  &trans    &trans  &trans       &kp PLUS   &kp N4  &kp N5    &kp N6  &kp MINUS  &trans
&trans  &trans  &trans  &trans    &trans  &trans       &kp ASTRK  &kp N1  &kp N2    &kp N3  &kp EQUAL  &trans
                        &kp LGUI  &trans  &kp SPACE    &kp RET    &kp N0  &kp RALT
            >;
        };

        leftRED {
            bindings = <
&trans  &trans  &trans  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans                &trans                &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans                &trans                &trans            &trans  &trans  &trans  &trans  &trans  &trans
                        &trans                &trans                &trans            &trans  &trans  &trans
            >;
        };

        sfS {
            bindings = <
&trans  &trans  &kp QUESTION  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp BACKSLASH  &kp QUESTION  &trans  &trans  &trans            &trans    &trans    &trans    &trans     &trans  &trans
&trans  &trans         &kp QUESTION  &trans  &trans  &trans            &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&trans  &kp PIPE       &trans        &trans  &trans  &trans            &trans    &trans    &trans    &trans     &trans  &trans
                                     &trans  &trans  &kp LEFT_SHIFT    &kp RET   &trans    &kp RALT
            >;
        };

        rightRED {
            bindings = <
&trans  &kp F1            &kp F2          &kp F3      &kp F4             &kp F5        &kp F6          &kp F7          &kp F8        &kp F9           &kp F10  &trans
&trans  &kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT  &kp C_VOLUME_UP    &kp C_MUTE    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp F11  &trans
&trans  &trans            &trans          &trans      &kp C_VOLUME_DOWN  &trans        &trans          &trans          &trans        &trans           &kp F12  &trans
                                          &mkp MB3    &mkp MB2           &mkp MB1      &trans          &trans          &trans
            >;
        };
    };
};
